#include<iostream>
#include<vector>
#include<math.h>
#include<iomanip>
#include<algorithm>
#include<string>
#include<unordered_map>
#include<fstream>
#include<immintrin.h>
#include<chrono>
#include<time.h>
#include<cctype>
#include <utility> 
#include <limits>
#include <tuple>
#include <map>
#define ll long long
 
using namespace std;
 
 
struct FenwickTree3D {
    int size;
    vector<vector<vector<int>>> bit;
 
    FenwickTree3D(int n) : size(n), bit(n, vector<vector<int>>(n, vector<int>(n, 0))) {}
 
    void add(int x, int y, int z, int value) {
        for (int i = x; i < size; i = i | (i + 1))
            for (int j = y; j < size; j = j | (j + 1))
                for (int k = z; k < size; k = k | (k + 1))
                    bit[i][j][k] += value;
    }
 
    int sum(int x, int y, int z) {
        int res = 0;
        for (int i = x; i >= 0; i = (i & (i + 1)) - 1)
            for (int j = y; j >= 0; j = (j & (j + 1)) - 1)
                for (int k = z; k >= 0; k = (k & (k + 1)) - 1)
                    res += bit[i][j][k];
        return res;
    }
 
    int sum(int x1, int y1, int z1, int x2, int y2, int z2) {
        return sum(x2, y2, z2)
            - sum(x1 - 1, y2, z2) - sum(x2, y1 - 1, z2) - sum(x2, y2, z1 - 1)
            + sum(x1 - 1, y1 - 1, z2) + sum(x2, y1 - 1, z1 - 1) + sum(x1 - 1, y2, z1 - 1)
            - sum(x1 - 1, y1 - 1, z1 - 1);
    }
};
 
int main() {
    int n, m;
    cin >> n >> m;
    FenwickTree3D tree(n);
 
    for (int i = 0; i < m; i++) {
        int p;
        cin >> p;
        if (p == 1) {
            int x, y, z, k;
            cin >> x >> y >> z >> k;
            tree.add(x, y, z, k);
        }
        else {
            int x1, y1, z1, x2, y2, z2;
            cin >> x1 >> y1 >> z1 >> x2 >> y2 >> z2;
            cout << tree.sum(x1, y1, z1, x2, y2, z2) << endl;
        }
    }
 
    return 0;
}
