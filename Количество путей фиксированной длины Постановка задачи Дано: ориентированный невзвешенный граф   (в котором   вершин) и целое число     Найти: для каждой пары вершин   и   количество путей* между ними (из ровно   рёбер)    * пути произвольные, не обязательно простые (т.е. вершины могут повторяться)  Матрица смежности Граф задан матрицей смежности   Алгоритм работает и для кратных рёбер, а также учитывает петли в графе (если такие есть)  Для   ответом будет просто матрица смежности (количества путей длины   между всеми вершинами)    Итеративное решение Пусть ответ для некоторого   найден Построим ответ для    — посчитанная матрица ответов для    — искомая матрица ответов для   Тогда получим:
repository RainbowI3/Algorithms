#include <iostream>
#include <vector>
using namespace std;
const int MOD = 1e9 + 7;
 
vector<vector<int>> multiply(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int N = A.size();
    vector<vector<int>> result(N, vector<int>(N, 0));
 
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            for (int k = 0; k < N; ++k) {
                result[i][j] = (result[i][j] + 1LL * A[i][k] * B[k][j]) % MOD;
            }
        }
    }
 
    return result;
}
 
vector<vector<int>> matrix_pow(const vector<vector<int>>& A, int exponent) {
    int N = A.size();
    vector<vector<int>> result(N, vector<int>(N, 0));
 
    for (int i = 0; i < N; ++i) {
        result[i][i] = 1;
    }
 
    vector<vector<int>> base = A;
    for (; exponent > 0;) {
        if (exponent % 2 == 1) {
            result = multiply(result, base);
        }
        base = multiply(base, base);
        exponent /= 2;
    }
 
    return result;
}
 
int main() {
    int N, M, K;
    cin >> N >> M >> K;
 
    vector<vector<int>> adjacency_matrix(N, vector<int>(N, 0));
    for (int i = 0; i < M; ++i) {
        int a, b;
        cin >> a >> b;
        adjacency_matrix[a - 1][b - 1] += 1;  
    }
 
    vector<vector<int>> result_matrix = matrix_pow(adjacency_matrix, K);
 
    int total_routes = 0;
    for (int i = 0; i < N; ++i) {
        total_routes = (total_routes + result_matrix[0][i]) % MOD;
    }
 
    cout << total_routes << endl;
 
    return 0;
}
